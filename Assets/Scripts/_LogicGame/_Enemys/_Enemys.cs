using UnityEngine;
using UnityEngine.UI;
using TMPro; // ðŸ‘ˆ thÃªm namespace TMP

public class _Enemy : MonoBehaviour, ITargetable
{
    [Header("ThÃ´ng tin hiá»ƒn thá»‹ (cÃ³ thá»ƒ chá»‰nh trong Inspector)")]
    [SerializeField] private string bossDisplayName = "Enemy"; // ðŸ‘ˆ TÃªn cÃ³ thá»ƒ sá»­a trong Inspector
    public Sprite avater;
    public int level = 1;

    [Header("Target Settings")]
    [SerializeField] private TargetType targetType = TargetType.Enemy; // Loáº¡i má»¥c tiÃªu
    [SerializeField] private bool isTargetable = true; // CÃ³ thá»ƒ target Ä‘Æ°á»£c khÃ´ng

    [Header("UI Canvas References")]
    public TextMeshProUGUI txt_NameBoss; // TÃªn boss
    public TextMeshProUGUI txt_HP_Bar; // Chá»‰ sá»‘ mÃ¡u
    public TextMeshProUGUI txt_level_boss; // Level boss
    public Image avatar_Boss; // Avatar boss

    [Header("Thanh mÃ¡u cá»§a Enemy")]
    public Image healthBar;

    [Header("MÃ¡u Enemy")]
    public float maxHealth = 100f;
    public float currenHealth;

    [Header("ThÃ´ng tin sÃ¡t thÆ°Æ¡ng vÃ  di chuyá»ƒn cá»§a Enemy")]
    public float attackDamage = 0f;
    public float moveSpeed = 0f;

    [Header("ThÃ nh pháº§n Enemy")]
    public Rigidbody2D RB2D;

    protected virtual void Awake()
    {
        RB2D = GetComponent<Rigidbody2D>();
    }

    protected virtual void Start()
    {
        currenHealth = maxHealth;
        UpdateUI();
    }

    // PhÆ°Æ¡ng thá»©c cáº­p nháº­t toÃ n bá»™ UI
    public virtual void UpdateUI()
    {
        UpdateHealthBar();
        UpdateNameDisplay();
        UpdateLevelDisplay();
        UpdateAvatarDisplay();
    }

    // Cáº­p nháº­t tÃªn boss
    public virtual void UpdateNameDisplay()
    {
        if (txt_NameBoss != null)
        {
            txt_NameBoss.text = bossDisplayName;
        }
    }

    // Cáº­p nháº­t level boss
    public virtual void UpdateLevelDisplay()
    {
        if (txt_level_boss != null)
        {
            txt_level_boss.text = "Lv." + level.ToString();
        }
    }

    // Cáº­p nháº­t avatar boss
    public virtual void UpdateAvatarDisplay()
    {
        if (avatar_Boss != null && avater != null)
        {
            avatar_Boss.sprite = avater;
        }
    }

    // Getter Ä‘á»ƒ láº¥y tÃªn boss
    public string GetBossName()
    {
        return bossDisplayName;
    }

    // Setter Ä‘á»ƒ Ä‘á»•i tÃªn boss (náº¿u cáº§n runtime)
    public void SetBossName(string newName)
    {
        bossDisplayName = newName;
        UpdateNameDisplay();
    }

    public virtual void TakeDame(float damage)
    {
        currenHealth -= damage;
        if (currenHealth < 0) currenHealth = 0;

        UpdateHealthBar();

        if (currenHealth <= 0)
        {
            Die();
        }
    }

    public virtual void UpdateHealthBar()
    {
        if (healthBar != null)
        {
            healthBar.fillAmount = currenHealth / maxHealth;
        }

        // Cáº­p nháº­t text hiá»ƒn thá»‹ sá»‘ mÃ¡u
        if (txt_HP_Bar != null)
        {
            txt_HP_Bar.text = Mathf.RoundToInt(currenHealth).ToString("N0") + " / " + Mathf.RoundToInt(maxHealth).ToString("N0");
        }
    }

    public virtual void Die()
    {
        Destroy(gameObject);
    }

    #region ITargetable Implementation

    public string GetDisplayName()
    {
        return bossDisplayName;
    }

    public int GetLevel()
    {
        return level;
    }

    public Sprite GetAvatar()
    {
        return avater;
    }

    public float GetCurrentHealth()
    {
        return currenHealth;
    }

    public float GetMaxHealth()
    {
        return maxHealth;
    }

    public TargetType GetTargetType()
    {
        return targetType;
    }

    public Transform GetTransform()
    {
        return transform;
    }

    public bool IsAlive()
    {
        return currenHealth > 0;
    }

    public bool IsTargetable()
    {
        return isTargetable && gameObject.activeInHierarchy;
    }

    /// <summary>
    /// Set loáº¡i target (Enemy, Boss, NPC, etc.)
    /// </summary>
    public void SetTargetType(TargetType type)
    {
        targetType = type;
    }

    /// <summary>
    /// Set cÃ³ thá»ƒ target Ä‘Æ°á»£c hay khÃ´ng
    /// </summary>
    public void SetTargetable(bool value)
    {
        isTargetable = value;
    }

    #endregion
}
